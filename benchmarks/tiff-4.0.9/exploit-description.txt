https://www.exploit-db.com/exploits/43322

Reproduce exploit native (add -fsanitize=address to enable ASan):
- Compile the program (./configure + make)
Alternatively, compile the affected program directly (easier if you want to chaneg the compiler arguments).
- clang -lm tools/pal2rgb.c libtiff/tif_dirinfo.c libtiff/tif_fax3sm.c libtiff/tif_lzma.c libtiff/tif_predict.c libtiff/tif_unix.c libtiff/tif_aux.c libtiff/tif_dirread.c libtiff/tif_flush.c libtiff/tif_lzw.c libtiff/tif_print.c libtiff/tif_version.c libtiff/tif_close.c libtiff/tif_dirwrite.c libtiff/tif_getimage.c libtiff/tif_next.c libtiff/tif_read.c libtiff/tif_warning.c libtiff/tif_codec.c libtiff/tif_dumpmode.c libtiff/tif_jbig.c libtiff/tif_ojpeg.c libtiff/tif_strip.c libtiff/tif_color.c libtiff/tif_error.c libtiff/tif_jpeg_12.c libtiff/tif_open.c libtiff/tif_swab.c libtiff/tif_write.c libtiff/tif_compress.c libtiff/tif_extension.c libtiff/tif_jpeg.c libtiff/tif_packbits.c libtiff/tif_thunder.c libtiff/tif_zip.c libtiff/tif_dir.c libtiff/tif_fax3.c libtiff/tif_luv.c libtiff/tif_pixarlog.c libtiff/tif_tile.c -I libtiff/ -o tools/pal2rgb
- tools/.libs/pal2rgb tiffpoc.tiff /dev/null


Reproduce exploit wasm
- Compile with:
/opt/wasi-sdk/bin/clang -D_WASI_EMULATED_MMAN -lwasi-emulated-mman --sysroot=/opt/wasi-sdk/share/wasi-sysroot/ tools/pal2rgb.c libtiff/tif_dirinfo.c libtiff/tif_fax3sm.c libtiff/tif_lzma.c libtiff/tif_predict.c libtiff/tif_unix.c libtiff/tif_aux.c libtiff/tif_dirread.c libtiff/tif_flush.c libtiff/tif_lzw.c libtiff/tif_print.c libtiff/tif_version.c libtiff/tif_close.c libtiff/tif_dirwrite.c libtiff/tif_getimage.c libtiff/tif_next.c libtiff/tif_read.c libtiff/tif_warning.c libtiff/tif_codec.c libtiff/tif_dumpmode.c libtiff/tif_jbig.c libtiff/tif_ojpeg.c libtiff/tif_strip.c libtiff/tif_color.c libtiff/tif_error.c libtiff/tif_jpeg_12.c libtiff/tif_open.c libtiff/tif_swab.c libtiff/tif_write.c libtiff/tif_compress.c libtiff/tif_extension.c libtiff/tif_jpeg.c libtiff/tif_packbits.c libtiff/tif_thunder.c libtiff/tif_zip.c libtiff/tif_dir.c libtiff/tif_fax3.c libtiff/tif_luv.c libtiff/tif_pixarlog.c libtiff/tif_tile.c -I libtiff/ -I /usr/local/include/ -Izlib-1.0 -Lzlib-1.0 -lz -o tools/pal2rgb.wasm
- wasmtime --dir=. --dir=/dev/ tools/pal2rgb.wasm tiffpoc.tiff /dev/null

The compilation does not work immediately due to assertions of the form:
assert(sizeof(uint64)==8)
in the files libtiff/tif_dirread.c and libtiff/tif_open.c.
uint64 is defined as TIFF_UINT64_T in tiff.h which is defined as unsigned long in tiffconf.h.
For some reason unsigned long is only 32 bits in a wasi binary.
I fixed this issue by changing the definitions in tiffconf.h (and also their equivalents in tif_config.h) such that the types from stdint.h are used instead.
I also had to out comment the assertion //assert(sizeof(tmsize_t)==sizeof(void*)) in tif_open.c since pointers are only 32 bit in WASM.


Wasm with canaries stacktrace:
wasmtime --dir=. --dir=/dev/ tools/pal2rgb.instr.wasm tiffpoc.tiff /dev/null

Caused by:
    0: failed to invoke command default
    1: wasm trap: unreachable
       wasm backtrace:
         0: 0x74dbb - <unknown>!dlfree
         1: 0x74d59 - <unknown>!free
         2: 0x87f2 - <unknown>!_TIFFfree
         3: 0x16e1 - <unknown>!main
         4: 0x7898c - <unknown>!__main_argc_argv
         5: 0x78b0d - <unknown>!__main_void
         6: 0x7860b - <unknown>!__original_main
         7:  0x7c4 - <unknown>!_start

native stack trace:
./tools/pal2rgb tiffpoc.tiff /dev/null

Aborted (core dumped)

native with address sanitizer (compiled -fsanitize=address):

==71408==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x611000000121 at pc 0x560565ca04ac bp 0x7fff1cbcb8c0 sp 0x7fff1cbcb8b0
WRITE of size 1 at 0x611000000121 thread T0
    #0 0x560565ca04ab in main tools/pal2rgb.c:196
    #1 0x7f47232600b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)
    #2 0x560565ca1c6d in _start (/home/foobar/development/fuzzing-workspace/wasm-project/benchmarks/tiff-4.0.9/tools/pal2rgb+0x22c6d)
