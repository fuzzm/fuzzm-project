Heap buffer overflow https://www.exploit-db.com/exploits/42600

Build for native:
- cmake .
or alternatively do
- cmake -DCMAKE_C_FLAGS="-fsanitize=address" .
to enable the address sanitizer.
This is recommended since the heap overflow crash the application otherwise.
The exploit is run with
- ./bin/opj_compress -i poc.bmp -o out-poc.jp2


Build for WASM (only opj_compress)
- wasi-clang --sysroot=$WASI_SYS_ROOT -D USE_JPIP=1 -I src/lib/openjp2 -I src/bin/common/ src/bin/jp2/opj_compress.c src/bin/jp2/convert.c src/lib/openjp2/bio.c src/lib/openjp2/jp2.c src/lib/openjp2/raw.c src/lib/openjp2/cidx_manager.c src/lib/openjp2/mct.c src/lib/openjp2/t1.c src/lib/openjp2/cio.c src/lib/openjp2/mqc.c src/lib/openjp2/dwt.c src/lib/openjp2/openjpeg.c src/lib/openjp2/t2.c src/lib/openjp2/event.c src/lib/openjp2/tcd.c src/lib/openjp2/function_list.c src/lib/openjp2/opj_malloc.c src/lib/openjp2/tgt.c src/lib/openjp2/image.c src/lib/openjp2/phix_manager.c src/lib/openjp2/thix_manager.c src/lib/openjp2/invert.c src/lib/openjp2/pi.c src/lib/openjp2/tpix_manager.c src/lib/openjp2/j2k.c src/lib/openjp2/ppix_manager.c src/bin/common/opj_getopt.c src/bin/jp2/convertbmp.c -o bin/opj_compress.wasm
- wasmtime --dir=. bin/opj_compress.wasm -i poc.bmp -o out-poc.jp2
- wasmtime run --dir=. bin/opj_compress.wasm -- -i poc.bmp -o out-poc.jp2


POC stack trace (WASM):
Caused by:
    0: failed to invoke command default
    1: wasm trap: unreachable
       wasm backtrace:
         0: 0x6278e - <unknown>!dlfree
         1: 0x6272c - <unknown>!free
         2: 0x33514 - <unknown>!opj_free
         3: 0x2ce0b - <unknown>!opj_tcd_code_block_enc_deallocate
         4: 0x2c85b - <unknown>!opj_tcd_free_tile
         5: 0x2c441 - <unknown>!opj_tcd_destroy
         6: 0x4d28c - <unknown>!opj_j2k_end_encoding
         7: 0x49ae5 - <unknown>!opj_j2k_exec
         8: 0x4c786 - <unknown>!opj_j2k_end_compress
         9: 0x12009 - <unknown>!opj_jp2_end_compress
         10: 0x253e3 - <unknown>!opj_end_compress
         11: 0x1b63 - <unknown>!main
         12: 0x645ee - <unknown>!__main_argc_argv
         13: 0x646a4 - <unknown>!__main_void
         14: 0x64187 - <unknown>!__original_main
         15:  0x716 - <unknown>!_start

POC stack trace (native with asan):
0x7ff4b061649f in opj_mqc_byteout /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/lib/openjp2/mqc.c:221
0x7ff4b061649f in opj_mqc_flush /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/lib/openjp2/mqc.c:421
0x7ff4b0657ac6 in opj_t1_encode_cblk /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/lib/openjp2/t1.c:1685
0x7ff4b0657ac6 in opj_t1_encode_cblks /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/lib/openjp2/t1.c:1539
0x7ff4b0679255 in opj_tcd_t1_encode /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/lib/openjp2/tcd.c:2052
0x7ff4b0679255 in opj_tcd_encode_tile /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/lib/openjp2/tcd.c:1240
0x7ff4b05bc587 in opj_j2k_write_sod /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/lib/openjp2/j2k.c:4358
0x7ff4b05c8411 in opj_j2k_write_first_tile_part /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/lib/openjp2/j2k.c:10659
0x7ff4b05c8411 in opj_j2k_post_write_tile /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/lib/openjp2/j2k.c:10448
0x7ff4b05f380f in opj_j2k_encode /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/lib/openjp2/j2k.c:10199
 0x55572b3e76e6 in main /home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/src/bin/jp2/opj_compress.c:1877
 0x7ff4b023e0b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)
 0x55572b3f067d in _start (/home/foo/development/fuzzing-workspace/wasm-project/benchmarks/openjpeg/bin/opj_compress+0x1a67d)
