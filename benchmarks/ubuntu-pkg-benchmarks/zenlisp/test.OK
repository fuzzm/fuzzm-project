zenlisp 2013-11-22 by Nils M Holm
Warning: no image loaded
=> :t
=> :t
=> '-----core-test-----
=> '(and)
=> :t
=> '(and :f)
=> :f
=> '(and t)
=> :t
=> '(and 'foo)
=> 'foo
=> '(and '#a)
=> '#a
=> '(and '(a . b))
=> '(a . b)
=> '(and '#abc)
=> '#abc
=> '(and :f 'foo)
=> :f
=> '(and 'foo 'bar 'baz)
=> 'baz
=> '(and t t t :f)
=> :f
=> '(apply cons '#ab)
=> '(a . b)
=> '(apply apply (cons cons '(#ab)))
=> '(a . b)
=> '(apply cons 'foo)
* REPL: apply: improper argument list: foo
=> '(apply 'foo '#xyz)
* REPL: apply: got non-function: foo
=> '(atom 'a)
=> :t
=> '(atom ())
=> :t
=> '(atom '#a)
=> :f
=> '(atom '(a . b))
=> :f
=> '(atom '#abc)
=> :f
=> '(bottom)
* REPL: (bottom)
=> '(bottom 'a)
* REPL: (bottom a)
=> '(bottom 'a ())
* REPL: (bottom a ())
=> '(bottom 'a () '(a . b))
* REPL: (bottom a () (a . b))
=> '(closure-form ())
* REPL: closure-form: got non-symbol: ()
=> '(closure-form foo)
=> :f
=> '(closure-form env)
=> 'env
=> '(lambda () foo)
=> (closure () foo ((foo . {void})))
=> '(closure-form body)
=> 'body
=> '(lambda () foo)
=> {closure () foo}
=> '(closure-form args)
=> 'args
=> '(lambda () foo)
=> {closure ()}
=> '(car 'a)
* REPL: car: cannot split atoms: a
=> '(car '#a)
=> 'a
=> '(car '(a . b))
=> 'a
=> '(car '#abc)
=> 'a
=> '(car ())
* REPL: car: cannot split atoms: ()
=> '(cdr 'a)
* REPL: cdr: cannot split atoms: a
=> '(cdr '#a)
=> ()
=> '(cdr '(a . b))
=> 'b
=> '(cdr '#abc)
=> '#bc
=> '(cdr ())
* REPL: cdr: cannot split atoms: ()
=> '(cond (t 'foo))
=> 'foo
=> '(cond (t 'foo) (t 'bar))
=> 'foo
=> '(cond (:f 'foo) (t 'bar))
=> 'bar
=> '(cond (:f (bottom)) (t 'bar))
=> 'bar
=> '(cond (:f (())) (t 'bar))
=> 'bar
=> '(cond (:f '1) (:f '2) (t 'bar))
=> 'bar
=> '(cond (:f 'foo))
* REPL: cond: no default
=> '(cond)
* REPL: wrong argument count: (cond)
=> '(cons 'a 'b)
=> '(a . b)
=> '(cons 'a '#b)
=> '#ab
=> '(cons 'a '#bc)
=> '#abc
=> '(cons 'a ())
=> '#a
=> '(cons () 'a)
=> '(() . a)
=> '(cons () ())
=> '(())
=> '(cons 'a (cons 'b 'c))
=> '(a b . c)
=> '(defined 'xyz)
=> :f
=> 'xyz
* REPL: symbol not bound: xyz
=> '(define xyz 'foo)
=> 'xyz
=> '(defined 'xyz)
=> :t
=> 'xyz
=> 'foo
=> '(define (xyz) 'foo)
=> 'xyz
=> '(defined 'xyz)
=> :t
=> '(xyz)
=> 'foo
=> '(define f (lambda () 'foo))
=> 'f
=> '#f
=> 'foo
=> '(define f (lambda #x x))
=> 'f
=> '(f 'foo)
=> 'foo
=> '(define f (lambda #xy (cons x y)))
=> 'f
=> '(f 'foo 'bar)
=> '(foo . bar)
=> '(define f (lambda #xyz (cons x (cons y z))))
=> 'f
=> '(f 'foo 'bar 'baz)
=> '(foo bar . baz)
=> '(define f (lambda x x))
=> 'f
=> '#f
=> ()
=> '(f 'foo)
=> '(foo)
=> '(f 'foo 'bar)
=> '(foo bar)
=> '(define f (lambda (x . y) y))
=> 'f
=> '#f
* REPL: wrong argument count: ({closure (x . y)})
=> '(f 'foo)
=> ()
=> '(f 'foo 'bar)
=> '(bar)
=> '(define #f 'foo)
=> 'f
=> '#f
=> 'foo
=> '(define #fx x)
=> 'f
=> '(f 'foo)
=> 'foo
=> '(define #fxy (cons x y))
=> 'f
=> '(f 'foo 'bar)
=> '(foo . bar)
=> '(define #fxyz (cons x (cons y z)))
=> 'f
=> '(f 'foo 'bar 'baz)
=> '(foo bar . baz)
=> '(define (f . x) x)
=> 'f
=> '#f
=> ()
=> '(f 'foo)
=> '(foo)
=> '(f 'foo 'bar)
=> '(foo bar)
=> '(define (f x . y) y)
=> 'f
=> '#f
* REPL: wrong argument count: ({closure (x . y)})
=> '(f 'foo)
=> ()
=> '(f 'foo 'bar)
=> '(bar)
=> '(defined 'defined)
=> :t
=> '(defined 'undefined)
=> :f
=> '(defined ())
* REPL: defined: got non-symbol: ()
=> '(defined '(a . b))
* REPL: defined: got non-symbol: (a . b)
=> '(defined '#ab)
* REPL: defined: got non-symbol: #ab
=> '(defined '#abc)
* REPL: defined: got non-symbol: #abc
=> '(dump-image delete-me)
=> :t
=> '(eq 'a 'a)
=> :t
=> '(eq 'a 'b)
=> :f
=> '(eq () ())
=> :t
=> '(eq 'a ())
=> :f
=> '(eq () 'b)
=> :f
=> '(eq 'a '#b)
=> :f
=> '(eq '#a 'b)
=> :f
=> '(eq '#a '#a)
=> :f
=> '(eq '(a . b) '(a . b))
=> :f
=> '(eq '#abc '#abc)
=> :f
=> '(explode 'a)
=> '#a
=> '(explode 'hello-world)
=> '#hello-world
=> '(explode ())
=> ()
=> '(explode '#abcdef)
* REPL: explode: got non-symbol: #abcdef
=> '(eval '(cons 'a 'b))
=> '(a . b)
=> '(define #fx 'done)
=> 'f
=> '(f (gc))
=> 'done
=> '(implode '#x)
=> 'x
=> '(implode '#hello-world)
=> 'hello-world
=> '(implode '(a b c (d . e) f))
* REPL: implode: non-symbol in argument: (d . e)
=> '(implode '(a b c de f))
* REPL: implode: input symbol has multiple characters: de
=> '(lambda () 'foo)
=> {closure ()}
=> '(lambda #x x)
=> {closure #x}
=> '(lambda #xy (cons x y))
=> {closure #xy}
=> '(lambda x x)
=> {closure x}
=> '(lambda (x . y) y)
=> {closure (x . y)}
=> '(lambda (x y . z) z)
=> {closure (x y . z)}
=> '((lambda () 'foo))
=> 'foo
=> '((lambda () 'foo) 'bar)
* REPL: wrong argument count: ({closure ()} bar)
=> '((lambda #x x))
* REPL: wrong argument count: ({closure #x})
=> '((lambda #x x) 'foo)
=> 'foo
=> '((lambda #x x) 'foo 'bar)
* REPL: wrong argument count: ({closure #x} foo bar)
=> '((lambda #xy (cons x y)))
* REPL: wrong argument count: ({closure #xy})
=> '((lambda #xy (cons x y)) 'foo)
* REPL: wrong argument count: ({closure #xy} foo)
=> '((lambda #xy (cons x y)) 'foo 'bar)
=> '(foo . bar)
=> '((lambda #xy (cons x y)) 'foo 'bar 'baz)
* REPL: wrong argument count: ({closure #xy} foo bar baz)
=> '((lambda x x))
=> ()
=> '((lambda x x) 'x)
=> '#x
=> '((lambda x x) 'x 'y)
=> '#xy
=> '((lambda x x) 'x 'y 'z)
=> '#xyz
=> '((lambda (x . y) y) 'x)
=> ()
=> '((lambda (x . y) y) 'x 'y)
=> '#y
=> '((lambda (x . y) y) 'x 'y 'z)
=> '#yz
=> '((lambda (x y . z) z) 'x)
* REPL: wrong argument count: ({closure (x y . z)} x)
=> '((lambda (x y . z) z) 'x 'y)
=> ()
=> '((lambda (x y . z) z) 'x 'y 'z)
=> '#z
=> '(define (list . x) x)
=> 'list
=> '(let () ())
=> ()
=> '(let ((x 'first)) x)
=> 'first
=> '(let ((x 'first) (y 'second) (z 'third)) (list x y z))
=> '(first second third)
=> '(let #x x)
* REPL: let/letrec: bad binding: x
=> '(let x x)
* REPL: let/letrec: bad environment: x
=> '(let ((x '0)) (let ((x '1) (y (cons x '5))) y))
=> '(0 . 5)
=> '(let ((x '0)) (let ((x '1)) (let ((y (cons x '5))) y)))
=> '(1 . 5)
=> '(letrec () ())
=> ()
=> '(letrec ((x 'first)) x)
=> 'first
=> '(letrec ((x 'first) (y 'second) (z 'third)) (list x y z))
=> '(first second third)
=> '(letrec #x x)
* REPL: let/letrec: bad binding: x
=> '(letrec x x)
* REPL: let/letrec: bad environment: x
=> '(letrec ((even-p (lambda #x (cond ((eq x ()) t) (t (odd-p (cdr x)))))) (odd-p (lambda #x (cond ((eq x ()) :f) (t (even-p (cdr x))))))) (list (odd-p '#iiiii) (even-p '#iiiii)))
=> '(:t :f)
=> '(defined 'foo)
=> :f
=> '(load foo)
=> :t
=> 'foo
=> 'bar
=> '(or)
=> :f
=> '(or :f)
=> :f
=> '(or t)
=> :t
=> '(or 'foo)
=> 'foo
=> '(or '#a)
=> '#a
=> '(or '(a . b))
=> '(a . b)
=> '(or '#abc)
=> '#abc
=> '(or :f 'foo)
=> 'foo
=> '(or 'foo 'bar 'baz)
=> 'foo
=> '(or :f :f :f t)
=> :t
=> ''foo
=> 'foo
=> '''foo
=> ''foo
=> ''#a
=> '#a
=> ''(a . b)
=> '(a . b)
=> ''#abcdef
=> '#abcdef
=> ''(define #fx (cons x ()))
=> '(define #fx (cons x ()))
=> '(recursive-bind ())
=> ()
=> '(recursive-bind '((a . b)))
=> '((a . b))
=> '(recursive-bind '((f . {closure ()})))
=> '((f . {closure ()}))
=> '(recursive-bind '((a . {closure ()}) (b . {closure ()})))
=> '((a . {closure ()}) (b . {closure ()}))
=> '(define #dx (cond ((eq x ()) 'foo) (t (d (cdr x)))))
=> 'd
=> '(stats ())
=> '(() #1 #5 #0)
=> '(stats (cons 'foo 'bar))
=> '((foo . bar) #6 #29 #0)
=> '(stats (or 'a 'b 'c 'd 'e 'f))
=> '(a #5 #18 #0)
=> '(stats (d '#iiiiiiiiiiiiiiiiiiiiiiiii))
=> '(foo #312 #1,099 #0)
=> '(trace d)
=> :t
=> '(d '#iiiii)
+ (d #iiiii)
+ (d #iiii)
+ (d #iii)
+ (d #ii)
+ (d #i)
+ (d ())
=> 'foo
=> '(trace)
=> :t
=> '-----definitions-----
=> 'slist1
=> 'slist2
=> 'nlist
=> 'olist
=> 'ilist
=> 'rlist
=> 'set1
=> 'set2
=> 'plist1
=> 'plist2
=> 'alist
=> 'clist1
=> 'clist2
=> 'num1
=> 'num2
=> 'int1
=> 'int2
=> 'int1n
=> 'int2n
=> 'rat1
=> 'rat2
=> 'rat1n
=> 'rat2n
=> 'xlist
=> 'expr
=> '-----base-tests-----
=> '(append slist1 slist2)
=> '#abcdefghijzyxwvutsrq
=> '(append slist1 ())
=> '#abcdefghij
=> '(append () slist1)
=> '#abcdefghij
=> '(append '(foo bar) '(baz))
=> '(foo bar baz)
=> '(append '#abc '#def '#xyz)
=> '#abcdefxyz
=> '(append () '#foo)
=> '#foo
=> '(append '#foo ())
=> '#foo
=> '(append '#a '(b . c))
=> '(a b . c)
=> '(append '#abc 'd)
=> '(a b c . d)
=> '(append () ())
=> ()
=> '(append ())
=> ()
=> '(append)
=> ()
=> '(assoc 'vii alist)
=> '(vii . 7)
=> '(assoc 'xxx alist)
=> :f
=> '(assoc 'xxx ())
=> :f
=> '(assoc 'b '((a . 1) (b . 2)))
=> '(b . 2)
=> '(assoc 'x '((x . 1) (x . 2)))
=> '(x . 1)
=> '(assoc 'q '((x . 1) (x . 2)))
=> :f
=> '(assoc '#foo '((#foo . bar)))
=> '(#foo . bar)
=> '(assq 'b '((a . 1) (b . 2)))
=> '(b . 2)
=> '(assq '#foo '((#foo . bar)))
=> :f
=> '(caaar clist1)
=> 'a
=> '(caadr clist1)
=> '#fg
=> '(cadar clist1)
=> '#cd
=> '(caddr clist1)
=> '(#jk #lm)
=> '(cdaar clist1)
=> '#b
=> '(cdadr clist1)
=> '(#hi)
=> '(cddar clist1)
=> '#e
=> '(cdddr clist1)
=> '#n
=> '(caar clist1)
=> '#ab
=> '(cadr clist1)
=> '(#fg #hi)
=> '(cdar clist1)
=> '(#cd e)
=> '(cddr clist1)
=> '((#jk #lm) n)
=> '(equal clist1 clist1)
=> :t
=> '(equal clist1 clist2)
=> :f
=> '(equal () ())
=> :t
=> '(equal '(a . b) '(a . b))
=> :t
=> '(equal '(f #fxy z) '(f #fxy z))
=> :t
=> '(equal '#abcdef '#abcdef)
=> :t
=> '(equal 'foo 'bar)
=> :f
=> '(equal '(x #y z) '(x #q z))
=> :f
=> '(equal '#xxx '#xxy)
=> :f
=> '(id ())
=> ()
=> '(id 'foo)
=> 'foo
=> '(id expr)
=> '(symbol #555 ((a . b) (c . d)) (list with members) #123 (car (some expr)))
=> '(list)
=> ()
=> '(list 'foo)
=> '(foo)
=> '(list 'a 'b 'c)
=> '#abc
=> ''((cons 'a 'b))
=> '((cons 'a 'b))
=> '(list (cons 'a 'b))
=> '((a . b))
=> '(listp expr)
=> :t
=> '(listp '#x)
=> :t
=> '(listp ())
=> :t
=> '(listp '#abc)
=> :t
=> '(listp '#abcdef)
=> :t
=> '(listp '(a . b))
=> :f
=> '(listp '(a b . c))
=> :f
=> '(listp 'foo)
=> :f
=> '(map cons olist olist)
=> '((#0 0) (#5 5) (#9 9) (#10 1 0) (#19 1 9) (#25 2 5) (#33 3 3) (#45 4 5) (#77 7 7) (#101 1 0 1))
=> '(map car '(#a #b #c))
=> '#abc
=> '(map cdr '(#a #b #c))
=> '(() () ())
=> '(map cons '#abc '#def)
=> '((a . d) (b . e) (c . f))
=> '(map list '#ab '#cd '#ef)
=> '(#ace #bdf)
=> '(member '(iv . 4) alist)
=> '((iv . 4) (v . 5) (vi . 6) (vii . 7) (viii . 8) (ix . 9) (x . 10))
=> '(member '(iv . 5) alist)
=> :f
=> '(member '(iv . 4) ())
=> :f
=> '(member 'bar '(foo bar baz))
=> '(bar baz)
=> '(member '(b . 2) '((a . 1) (b . 2)))
=> '((b . 2))
=> '(member 'foo '#abcdef)
=> :f
=> '(memq 'h slist1)
=> '#hij
=> '(memq 'x slist1)
=> :f
=> '(memq 'a ())
=> :f
=> '(memq 'bar '(foo bar baz))
=> '(bar baz)
=> '(memq '(b . 2) '((a . 1) (b . 2)))
=> :f
=> '(neq 'foo 'bar)
=> :t
=> '(neq 'foo '#foo)
=> :t
=> '(neq 'a '(a . b))
=> :t
=> '(neq 'foo 'foo)
=> :f
=> '(neq neq neq)
=> :f
=> '(neq () ())
=> :f
=> '(neq '#foo '#foo)
=> :t
=> '(neq '(a . b) '(a . b))
=> :t
=> '(null ())
=> :t
=> '(null :f)
=> :f
=> '(null 'x)
=> :f
=> '(null '#abc)
=> :f
=> '(not ())
=> :f
=> '(not :f)
=> :t
=> '(not t)
=> :f
=> '(not 'foo)
=> :f
=> '(not '#abc)
=> :f
=> '(fold cons 'a '#b)
=> '(a . b)
=> '(fold cons 'a '#bc)
=> '((a . b) . c)
=> '(fold cons 'a ())
=> 'a
=> '(fold-r cons 'a '#b)
=> '(b . a)
=> '(fold-r cons 'a '#bc)
=> '(b c . a)
=> '(fold-r cons 'a ())
=> 'a
=> '(reverse clist1)
=> '(n (#jk #lm) (#fg #hi) (#ab #cd e))
=> '(reverse olist)
=> '(#101 #77 #45 #33 #25 #19 #10 #9 #5 #0)
=> '(reverse ())
=> ()
=> '(reverse '(foo bar))
=> '(bar foo)
=> '(reverse '#abcdef)
=> '#fedcba
=> '(reverse ())
=> ()
=> '-----numeric-tests-----
=> '#*
=> '#1
=> '(* '#2)
=> '#2
=> '(* '#2 '#3 '#4 '#5)
=> '#120
=> '(* rat1 rat1)
=> '#289/529
=> '(* rat2 rat2n)
=> '#-529/289
=> '(* rat1n rat1)
=> '#-289/529
=> '(* rat2n rat2n)
=> '#529/289
=> '(* int1 int2)
=> '#43166235
=> '(* int1n int2)
=> '#-43166235
=> '(* int1 int2n)
=> '#-43166235
=> '(* int1n int2n)
=> '#43166235
=> '(* num1 num2)
=> '#43166235
=> '#+
=> '#0
=> '(+ '#2)
=> '#2
=> '(+ '#2 '#3 '#4 '#5)
=> '#14
=> '(+ rat1 rat2)
=> '#818/391
=> '(+ rat1 rat2n)
=> '#-240/391
=> '(+ rat1n rat2)
=> '#240/391
=> '(+ rat1n rat2n)
=> '#-818/391
=> '(+ rat2 rat1)
=> '#818/391
=> '(+ rat2 rat1n)
=> '#240/391
=> '(+ rat2n rat1)
=> '#-240/391
=> '(+ rat2n rat1n)
=> '#-818/391
=> '(+ int1 int2)
=> '#56332
=> '(+ int1 int2n)
=> '#54778
=> '(+ int1n int2)
=> '#-54778
=> '(+ int1n int2n)
=> '#-56332
=> '(+ num1 num2)
=> '#56332
=> '(+ num2 num1)
=> '#56332
=> '(- '#2)
=> '#-2
=> '(- '#2 '#3 '#4 '#5)
=> '#-10
=> '(- rat1 rat2)
=> '#-240/391
=> '(- rat1 rat2n)
=> '#818/391
=> '(- rat1n rat2)
=> '#-818/391
=> '(- rat1n rat2n)
=> '#240/391
=> '(- rat2 rat1)
=> '#240/391
=> '(- rat2 rat1n)
=> '#818/391
=> '(- rat2n rat1)
=> '#-818/391
=> '(- rat2n rat1n)
=> '#-240/391
=> '(- int1 int2)
=> '#54778
=> '(- int1 int2n)
=> '#56332
=> '(- int1n int2)
=> '#-56332
=> '(- int1n int2n)
=> '#-54778
=> '(- int2 int1)
=> '#-54778
=> '(- int2 int1n)
=> '#56332
=> '(- int2n int1)
=> '#-56332
=> '(- int2n int1n)
=> '#54778
=> '(- num1 num2)
=> '#54778
=> '(- num2 num1)
=> '#-54778
=> '(/ '#2)
=> '#1/2
=> '(/ '#2 '#3 '#4 '#5)
=> '#1/30
=> '(/ rat1 rat2)
=> '#289/529
=> '(/ rat1 rat2n)
=> '#-289/529
=> '(/ rat1n rat2)
=> '#-289/529
=> '(/ rat1n rat2n)
=> '#289/529
=> '(/ rat2 rat1)
=> '#529/289
=> '(/ rat2 rat1n)
=> '#-529/289
=> '(/ rat2n rat1)
=> '#-529/289
=> '(/ rat2n rat1n)
=> '#529/289
=> '(/ int1 int2)
=> '#55555/777
=> '(/ int1 int2n)
=> '#-55555/777
=> '(/ int1n int2)
=> '#-55555/777
=> '(/ int1n int2n)
=> '#55555/777
=> '(/ int2 int1)
=> '#777/55555
=> '(/ int2 int1n)
=> '#-777/55555
=> '(/ int2n int1)
=> '#-777/55555
=> '(/ int2n int1n)
=> '#777/55555
=> '(/ num1 num2)
=> '#55555/777
=> '(/ num2 num1)
=> '#777/55555
=> '(< '#2 '#3 '#4 '#5)
=> :t
=> '(< rat1 rat2)
=> :t
=> '(< rat1 rat2n)
=> :f
=> '(< rat1n rat2)
=> :t
=> '(< rat1n rat2n)
=> :f
=> '(< rat2 rat1)
=> :f
=> '(< rat2 rat1n)
=> :f
=> '(< rat2n rat1)
=> :t
=> '(< rat2n rat1n)
=> :t
=> '(< rat2 rat2)
=> :f
=> '(< rat2n rat2n)
=> :f
=> '(< int1 int2)
=> :f
=> '(< int2n int1n)
=> :f
=> '(< num1 num2)
=> :f
=> '(< num2 num1)
=> :t
=> '(<= '#3 '#3 '#4 '#5)
=> :t
=> '(<= rat1 rat2)
=> :t
=> '(<= rat1 rat2n)
=> :f
=> '(<= rat1n rat2)
=> :t
=> '(<= rat1n rat2n)
=> :f
=> '(<= rat2 rat1)
=> :f
=> '(<= rat2 rat1n)
=> :f
=> '(<= rat2n rat1)
=> :t
=> '(<= rat2n rat1n)
=> :t
=> '(<= rat2 rat2)
=> :t
=> '(<= rat2n rat2n)
=> :t
=> '(<= int1 int2)
=> :f
=> '(<= int2n int1n)
=> :f
=> '(<= num1 num2)
=> :f
=> '(<= num2 num1)
=> :t
=> '(= '#3 '#3 '#3 '#3)
=> :t
=> '(= num1 num1)
=> :t
=> '(= num1 num2)
=> :f
=> '(= int1 int1)
=> :t
=> '(= int1 int1n)
=> :f
=> '(= int1 int2)
=> :f
=> '(= int1n int1n)
=> :t
=> '(= int1n int2n)
=> :f
=> '(= rat1 rat1)
=> :t
=> '(= rat1 rat1n)
=> :f
=> '(= rat1 rat2)
=> :f
=> '(= rat1n rat1n)
=> :t
=> '(= rat1n rat2n)
=> :f
=> '(= '#2 '#10/5)
=> :t
=> '(> '#5 '#4 '#3 '#2)
=> :t
=> '(> rat1 rat2)
=> :f
=> '(> rat1 rat2n)
=> :t
=> '(> rat1n rat2)
=> :f
=> '(> rat1n rat2n)
=> :t
=> '(> rat2 rat1)
=> :t
=> '(> rat2 rat1n)
=> :t
=> '(> rat2n rat1)
=> :f
=> '(> rat2n rat1n)
=> :f
=> '(> rat2 rat2)
=> :f
=> '(> rat2n rat2n)
=> :f
=> '(> int1 int2)
=> :t
=> '(> int2n int1n)
=> :t
=> '(> num1 num2)
=> :t
=> '(> num2 num1)
=> :f
=> '(>= '#5 '#4 '#3 '#3)
=> :t
=> '(>= rat1 rat2)
=> :f
=> '(>= rat1 rat2n)
=> :t
=> '(>= rat1n rat2)
=> :f
=> '(>= rat1n rat2n)
=> :t
=> '(>= rat2 rat1)
=> :t
=> '(>= rat2 rat1n)
=> :t
=> '(>= rat2n rat1)
=> :f
=> '(>= rat2n rat1n)
=> :f
=> '(>= rat2 rat2)
=> :t
=> '(>= rat2n rat2n)
=> :t
=> '(>= int1 int2)
=> :t
=> '(>= int2n int1n)
=> :t
=> '(>= num1 num2)
=> :t
=> '(>= num2 num1)
=> :f
=> '(abs num1)
=> '#55555
=> '(abs int1)
=> '#55555
=> '(abs int1n)
=> '#55555
=> '(abs rat1)
=> '#17/23
=> '(abs rat1n)
=> '#17/23
=> '(denominator rat1)
=> '#23
=> '(denominator rat2)
=> '#17
=> '(denominator rat1n)
=> '#23
=> '(denominator rat2n)
=> '#17
=> '(divide int1 int2)
=> '(#71 #388)
=> '(divide int1 int2n)
=> '(#-71 #388)
=> '(divide int1n int2)
=> '(#-71 #-388)
=> '(divide int1n int2n)
=> '(#71 #-388)
=> '(divide int2 int1)
=> '(#0 #777)
=> '(divide int2 int1n)
=> '(#0 #777)
=> '(divide int2n int1)
=> '(#0 #-777)
=> '(divide int2n int1n)
=> '(#0 #-777)
=> '(divide num1 num2)
=> '(#71 #388)
=> '(divide num1 int2)
=> '(#71 #388)
=> '(divide num1 int2n)
=> '(#-71 #388)
=> '(divide int1n num2)
=> '(#-71 #-388)
=> 'digits
=> '0
=> '1
=> '2
=> '3
=> '4
=> '5
=> '6
=> '7
=> '8
=> '9
=> '(even '#100)
=> :t
=> '(even '#101)
=> :f
=> '(even '#-102)
=> :t
=> '(even '#-103)
=> :f
=> '(even '#104)
=> :t
=> '(even '#105)
=> :f
=> '(even '#106)
=> :t
=> '(even '#-107)
=> :f
=> '(even '#-108)
=> :t
=> '(even '#-109)
=> :f
=> '(even '#2/1)
=> :f
=> '(even '#2/3)
=> :f
=> '(expt '#2 '#0)
=> '#1
=> '(expt '#2 '#1)
=> '#2
=> '(expt '#2 '#16)
=> '#256
=> '(expt '#2 '#-1)
=> '#1/2
=> '(expt '#2 '#-8)
=> '#1/256
=> '(expt '#1/2 '#-8)
=> '#256
=> '(expt '#2/3 '#-3)
=> '#27/8
=> '(expt '#-2/3 '#3)
=> '#-8/27
=> '(expt '#-2/3 '#-3)
=> '#-27/8
=> '(gcd '#289 '#34)
=> '#17
=> '(gcd '#34 '#289)
=> '#17
=> '(gcd '#+289 '#+34)
=> '#17
=> '(gcd '#+34 '#+289)
=> '#17
=> '(gcd '#-289 '#+34)
=> '#17
=> '(gcd '#+34 '#-289)
=> '#17
=> '(integer rat1)
* integer: (bottom (r-integer #17/23))
=> '(integer '#20/5)
=> '#4
=> '(integer int1n)
=> '#-55555
=> '(integer num1)
=> '#55555
=> '(integer int1)
=> '#55555
=> '(integer int1n)
=> '#-55555
=> '(integer num1)
=> '#55555
=> '(integer-p int1)
=> :t
=> '(integer-p int1n)
=> :t
=> '(integer-p num1)
=> :t
=> '(length clist1)
=> '#4
=> '(length nlist)
=> '#10
=> '(length xlist)
=> '#5
=> '(apply max '(#2/3))
=> '#2/3
=> '(apply max rlist)
=> '#9/10
=> '(apply min '(#2/3))
=> '#2/3
=> '(apply min rlist)
=> '#1/2
=> '(modulo int1 int2)
=> '#388
=> '(modulo int1 int2n)
=> '#-389
=> '(modulo int1n int2)
=> '#389
=> '(modulo int1n int2n)
=> '#-388
=> '(modulo int2 int1)
=> '#777
=> '(modulo int2 int1n)
=> '#-54778
=> '(modulo int2n int1)
=> '#54778
=> '(modulo int2n int1n)
=> '#-777
=> '(modulo num1 num2)
=> '#388
=> '(modulo num1 int2)
=> '#388
=> '(modulo num1 int2n)
=> '#-389
=> '(modulo int1n num2)
=> '#389
=> '(natural num1)
=> '#55555
=> '(natural int1)
=> '#55555
=> '(natural int1n)
* i-natural: (bottom (i-natural #-55555))
=> '(natural rat1)
* r-integer: (bottom (r-integer #17/23))
* Trace: natural
=> '(natural '#20/4)
=> '#5
=> '(natural '#-20/4)
* i-natural: (bottom (i-natural #-5))
=> '(natural-p num1)
=> :t
=> '(natural-p int1)
=> :f
=> '(natural-p int1n)
=> :f
=> '(negate rat1)
=> '#-17/23
=> '(negate rat1n)
=> '#17/23
=> '(negate int1)
=> '#-55555
=> '(negate int1n)
=> '#55555
=> '(negate num1)
=> '#-55555
=> '(negative rat1)
=> :f
=> '(negative rat1n)
=> :t
=> '(negative int1)
=> :f
=> '(negative int1n)
=> :t
=> '(negative num1)
=> :f
=> '(number-p num1)
=> :t
=> '(number-p int1)
=> :t
=> '(number-p int1n)
=> :t
=> '(number-p rat1)
=> :t
=> '(number-p rat1n)
=> :t
=> '(number-p '#-1/-1)
=> :t
=> '(number-p clist1)
=> :f
=> '(numerator rat1)
=> '#17
=> '(numerator rat2)
=> '#23
=> '(numerator rat1n)
=> '#-17
=> '(numerator rat2n)
=> '#-23
=> '(odd '#100)
=> :f
=> '(odd '#101)
=> :t
=> '(odd '#-102)
=> :f
=> '(odd '#-103)
=> :t
=> '(odd '#104)
=> :f
=> '(odd '#105)
=> :t
=> '(odd '#106)
=> :f
=> '(odd '#-107)
=> :t
=> '(odd '#-108)
=> :f
=> '(odd '#-109)
=> :t
=> '(odd '#2/1)
=> :t
=> '(odd '#2/3)
=> :t
=> '(one '#0)
=> :f
=> '(one '#1)
=> :t
=> '(one '#+1)
=> :t
=> '(one '#+25)
=> :f
=> '(one '#-1)
=> :f
=> '(one rat1)
=> :f
=> '(one '#1/2)
=> :f
=> '(one '#2/2)
=> :t
=> '(one '#-2/2)
=> :f
=> '(quotient int1 int2)
=> '#71
=> '(quotient int1 int2n)
=> '#-71
=> '(quotient int1n int2)
=> '#-71
=> '(quotient int1n int2n)
=> '#71
=> '(quotient int2 int1)
=> '#0
=> '(quotient int2 int1n)
=> '#0
=> '(quotient int2n int1)
=> '#0
=> '(quotient int2n int1n)
=> '#0
=> '(quotient num1 num2)
=> '#71
=> '(quotient num1 int2)
=> '#71
=> '(quotient num1 int2n)
=> '#-71
=> '(quotient int1n num2)
=> '#-71
=> '(rational rat1)
=> '#17/23
=> '(rational rat1n)
=> '#-17/23
=> '(rational int1)
=> '#+55555/1
=> '(rational int1n)
=> '#-55555/1
=> '(rational num1)
=> '#55555/1
=> '(rational-p rat1)
=> :t
=> '(rational-p rat1n)
=> :t
=> '(rational-p int1)
=> :f
=> '(rational-p int1n)
=> :f
=> '(rational-p num1)
=> :f
=> '(remainder int1 int2)
=> '#388
=> '(remainder int1 int2n)
=> '#388
=> '(remainder int1n int2)
=> '#-388
=> '(remainder int1n int2n)
=> '#-388
=> '(remainder int2 int1)
=> '#777
=> '(remainder int2 int1n)
=> '#777
=> '(remainder int2n int1)
=> '#-777
=> '(remainder int2n int1n)
=> '#-777
=> '(remainder num1 num2)
=> '#388
=> '(remainder num1 int2)
=> '#388
=> '(remainder num1 int2n)
=> '#388
=> '(remainder int1n num2)
=> '#-388
=> '(sqrt '#1)
=> '#1
=> '(sqrt '#100)
=> '#10
=> '(sqrt '#2)
=> '#665857/470832
=> '(zero '#0)
=> :t
=> '(zero '#1)
=> :f
=> '(zero '#+0)
=> :t
=> '(zero '#-0)
=> :t
=> '(zero '#2/5)
=> :f
=> '(zero '#0/5)
=> :t
=> '(quit)
